# -*- coding: utf-8 -*-
"""week2_Student Performance Predictor .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yS0sZPL_FhyfnAkj_DBTdoT-9w3PtBvu
"""

import pandas as pd
df=pd.read_csv('/content/StudentsPerformance.csv')
df

#Select target (e.g., Pass/Fail using threshold on scores)

pass_marks = 50
df['total_score'] = df['math score'] + df['reading score'] + df['writing score']
df['average_score']=df['total_score']/3
df['pass_status'] = df['average_score'].apply(lambda x: 'Pass' if x >= pass_marks else 'Fail')
df

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder

df=pd.read_csv('/content/StudentsPerformance.csv')
df.head(2)

df['total_score'] = df['math score'] + df['reading score'] + df['writing score']
df['average_score'] = df['total_score'] / 3

# Create pass/fail result column (1 = Pass, 0 = Fail)
df['result'] = df['average_score'].apply(lambda x: 1 if x >= 50 else 0)

# Encode categorical columns
label_cols = ['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']
df_encoded = df.copy()
le = LabelEncoder()

for col in label_cols:
    df_encoded[col] = le.fit_transform(df_encoded[col])

# Features and target
X = df_encoded[label_cols + ['math score', 'reading score', 'writing score']]
y = df_encoded['result']

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression
log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train, y_train)
log_preds = log_model.predict(X_test)

# Decision Tree
tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)
tree_preds = tree_model.predict(X_test)

# Evaluation for Logistic Regression
print("=== Logistic Regression ===")
print("Accuracy:", accuracy_score(y_test, log_preds))
print("Precision:", precision_score(y_test, log_preds))
print("Confusion Matrix:\n", confusion_matrix(y_test, log_preds))

# Evaluation for Decision Tree
print("\n=== Decision Tree ===")
print("Accuracy:", accuracy_score(y_test, tree_preds))
print("Precision:", precision_score(y_test, tree_preds))
print("Confusion Matrix:\n", confusion_matrix(y_test, tree_preds))